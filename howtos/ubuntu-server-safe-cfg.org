#+TITLE: ubuntu server safe config

* refs:
https://www.digitalocean.com/community/tutorials/initial-server-setup-with-ubuntu-12-04
https://www.digitalocean.com/community/tutorials/how-to-protect-ssh-with-fail2ban-on-ubuntu-12-04
* check if your server has been attacked
#+BEGIN_SRC sh
$ sudo grep "Failed password " /var/log/auth.log | awk '{print $11}' | sort | uniq -c | sort -nr | more
#+END_SRC

* initial config
** root login
Once you know your IP address and root password, login as the main user, root.

** change root password
  #+BEGIN_SRC sh
  # passwd root
  #+END_SRC

** create a new user
  #+BEGIN_SRC sh
  # adduser demo
  #+END_SRC

** root privileges
  give the new user the root privileges
  #+BEGIN_SRC sh
  $ sudo visudo
  #+END_SRC
  Find the section called user privilege specification. It will look like
  this:
  #+BEGIN_SRC info
  # User privilege specification
  root    ALL=(ALL:ALL) ALL
  #+END_SRC
  Under there, add the following line, granting all the permissions to your 
  new user:
  #+BEGIN_SRC info
  demo    ALL=(ALL:ALL) ALL
  #+END_SRC
  save & exit

** configure ssh
open the configure file:
#+BEGIN_SRC sh
$ sudo nano /etc/ssh/sshd_config
#+END_SRC

Find the following sections and change the information where applicable:
#+BEGIN_SRC info
Port 25000
Protocol 2
PermitRootLogin no
#+END_SRC

PermitRootLogin: change this from yes to no to stop future root login. You 
will now only be logging on as the new user.

Add these lines to the bottom of the document, replacing *demo* in the 
AllowUsers line with your username. (AllowUsers will limit login to only 
the users on that line. To avoid this, skip this line):
#+BEGIN_SRC info
UseDNS no
AllowUsers demo
#+END_SRC

Save and Exit

** Reload and Done! 
Reload SSH, and it will implement the new ports and settings.
#+BEGIN_SRC sh
$ sudo reload ssh
#+END_SRC

test the new settings from a client machine:
#+BEGIN_SRC sh
ssh -p 25000 demo@123.45.67.890
#+END_SRC
* protect ssh with fail2ban
The program works by scanning through log files and reacting to offending 
actions such as repeated failed login attempts.

** install fail2ban
#+BEGIN_SRC sh
$ sudo apt-get install fail2ban
#+END_SRC

** Copy the Configuration File
The default fail2ban configuration file is location at 
/etc/fail2ban/jail.conf. The configuration work should not be done in that 
file, however, and we should instead make a local copy of it.

#+BEGIN_SRC sh
$ sudo cp /etc/fail2ban/jail.conf /etc/fail2ban/jail.local
#+END_SRC
After the file is copied, you can make all of your changes within the new 
jail.local file. Many of possible services that may need protection are 
in the file already. Each is located in its own section, configured and
turned off.

** Configure the Defaults in Jail.Local
Open up the the new fail2ban configuration file:
#+BEGIN_SRC sh
sudo nano /etc/fail2ban/jail.local
#+END_SRC

The first section of defaults covers the basic rules that fail2ban will 
follow. If you want to set up more nuanced protection on your virtual 
server, you can customize the details in each section.

You can see the default section below.
#+BEGIN_SRC info
[DEFAULT]

# "ignoreip" can be an IP address, a CIDR mask or a DNS host
ignoreip = 127.0.0.1/8
bantime  = 600
maxretry = 3

# "backend" specifies the backend used to get files modification. Available
# options are "gamin", "polling" and "auto".
# yoh: For some reason Debian shipped python-gamin didn't work as expected
#      This issue left ToDo, so polling is default backend for now
backend = auto

#
# Destination email address used solely for the interpolations in
# jail.{conf,local} configuration files.
destemail = root@localhost
#+END_SRC

Write your personal IP address into the *ignoreip* line. You can separate 
each address with a space. IgnoreIP allows you white list certain IP 
addresses and make sure that they are not locked out. Including your 
address will guarantee that you do not accidentally ban yourself from 
your own server.

The next step is to decide on a *bantime*, the number of seconds that a 
host would be blocked from the VPS if they are found to be in violation 
of any of the rules. This is especially useful in the case of bots, that 
once banned, will simply move on to the next target. The default is set 
for 10 minutes—you may raise this to an hour (or higher) if you like.

*Maxretry* is the amount of incorrect login attempts that a host may have 
before they get banned for the length of the ban time.

You can leave the *backend* as auto.

*Destemail* is the email that alerts get sent to. If you have a mail server 
set up on your droplet, Fail2Ban can email you when it bans an IP address.

Additional Details—Actions

The Actions section is located below the defaults. The beginning looks 
like this:
#+BEGIN_SRC info
#
# ACTIONS
#

# Default banning action (e.g. iptables, iptables-new,
# iptables-multiport, shorewall, etc) It is used to define
# action_* variables. Can be overridden globally or per
# section within jail.local file
banaction = iptables-multiport

# email action. Since 0.8.1 upstream fail2ban uses sendmail
# MTA for the mailing. Change mta configuration parameter to mail
# if you want to revert to conventional 'mail'.
mta = sendmail

# Default protocol
protocol = tcp
[...]
#+END_SRC

*Banaction* describes the steps that fail2ban will take to ban a matching IP 
address. This is a shorter version of the file extension where the config 
if is located. The default ban action, "iptables-multiport", can be found 
at /etc/fail2ban/action.d/iptables-multiport.conf

*MTA* refers to email program that fail2ban will use to send emails to 
call attention to a malicious IP.

You can change the *protocol* from TCP to UDP in this line as well, 
depending on which one you want fail2ban to monitor.

** Configure the ssh-iptables Section in Jail.Local
The SSH details section is just a little further down in the config, 
and it is already set up and turned on. Although you should not be 
required to make to make any changes within this section, you can find 
the details about each line below.

#+BEGIN_SRC info
[ssh]

enabled  = true
port     = ssh
filter   = sshd
logpath  = /var/log/auth.log
maxretry = 6
#+END_SRC

*Enabled* simply refers to the fact that SSH protection is on. You can turn 
it off with the word "false".

The *port* designates the port that fail2ban monitors. If you have set up
 your virtual private server on a non-standard port, change the port to 
match the one you are using:
#+BEGIN_SRC info
 eg. port=30000
#+END_SRC

The *filter*, set by default to sshd, refers to the config file containing 
the rules that fail2ban uses to find matches. sshd refers to the 
/etc/fail2ban/filter.d/sshd.conf.

*log path* refers to the log location that fail2ban will track.

The *max retry* line within the SSH section has the same definition as 
the default option. However, if you have enabled multiple services and 
want to have specific values for each one, you can set the new max 
retry amount for SSH here.

** Restart Fail2Ban
After making any changes to the fail2ban config, always be sure to restart
 Fail2Ban:
#+BEGIN_SRC sh
$ sudo service fail2ban restart
#+END_SRC

You can see the rules that fail2ban puts in effect within the IP table:
#+BEGIN_SRC sh
$ sudo iptables -L
#+END_SRC
