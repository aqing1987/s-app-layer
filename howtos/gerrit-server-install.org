#+title: Gerrit Server Install in ubuntu16.04

* reference
https://gerrit-documentation.storage.googleapis.com/Documentation/2.12.3/install.html
http://www.blogarama.com/programming-blogs/331217-devmain-java-mobile-apps-linux-and-more-blog/3713087-gerrit-with-mysql-installation-guide
http://blog.csdn.net/ganshuyu/article/details/8978614

* requirements
JDK > 1.8

* Download Gerrit
https://gerrit-releases.storage.googleapis.com/index.html

* Database Setup
** H2
If you choose H2, Gerrit will automatically set up the embedded H2 database 
as backend so no set up or configuration is necessary.

Using the embedded H2 database is the easiest way to get a Gerrit site up and
running, making it ideal for proof of concepts or small team servers. On the
flip side, H2 is not the recommended option for large corporate installations.
This is because there is no easy way to interact with the database while Gerrit
is offline, it’s not easy to backup the data, and it’s not possible to set up 
H2 in a load balanced/hotswap configuration.

** MySQL
This option is also more complicated than the H2 option. It's recommended for
larger installations.

Create a user for the web application within the database, assign it a password,
create a database, and give the newly created user full rights on it:
#+BEGIN_SRC sh
mysql

  CREATE USER 'gerrit2'@'localhost' IDENTIFIED BY 'secret';
  CREATE DATABASE reviewdb;
  ALTER DATABASE reviewdb charset=latin1;
  GRANT ALL ON reviewdb.* TO 'gerrit2'@'localhost';
  FLUSH PRIVILEGES;
#+END_SRC

install mysql by using command below:
#+BEGIN_SRC sh
sudo apt-get install mysql-server mysql-client
#+END_SRC

* Initialize the Site
** create user gerrit2
#+BEGIN_SRC sh
sudo adduser gerrit2
su gerrit
#+END_SRC

** config java env
** install gerrit
#+BEGIN_SRC sh
gerrit2@aa:~$ java -jar gerrit-2.12.4.war init -d review_site
#+END_SRC
** create code base
#+BEGIN_SRC sh
mkdir gerrit_code
#+END_SRC

** config gerrit

** install apache2
#+BEGIN_SRC sh
sudo apt-get install apache2
#+END_SRC

** config apache2
*** enable proxy, rewrite, ssl
#+BEGIN_SRC sh
cd /etc/apache2/mods-enabled
ln -s ../mods-available/proxy.load 
ln -s ../mods-available/proxy.conf
ln -s ../mods-available/proxy_http.load
ln -s ../mods-available/proxy_balancer.conf
ln -s ../mods-available/proxy_balancer.load
ln -s ../mods-available/rewrite.load
ln -s ../mods-available/ssl.conf
ln -s ../mods-available/ssl.load
#+END_SRC

*** config ports
#+BEGIN_SRC sh
vi /etc/apache2/ports.conf

...
Listen 80
Listen 8081
...

sudo vi /etc/apache2/sites-enabled/000-default.conf
...
<VirtualHost *:8080>
    ServerAdmin webmaster@localhost
    DocumentRoot /var/www/html

    ErrorLog ${APACHE_LOG_DIR}/error.log
    CustomLog ${APACHE_LOG_DIR}/access.log combined

</VirtualHost>
...
#+END_SRC

*** reverse proxy
sudo vi /etc/apache2/httpd.conf
#+BEGIN_SRC sh
ServerName s.han-networks.com   
<VirtualHost *:8080>
    ProxyRequests Off
	ProxyVia Off
	ProxyPreserveHost On
	AllowEncodedSlashes On
	RewriteEngine On
	RewriteRule ^/(.*) http://192.168.20.52:8081/$1 [NE,P]
						  
	<Proxy *>
		Order deny,allow
		Allow from all
	</Proxy>
										  
	<Location /login/>
		AuthType Basic  
        AuthName "Gerrit Code Review"
        Require valid-user
		AuthBasicProvider file
		AuthUserFile /home/gerrit2/review_site/etc/passwd
    </Location>
	    
	ProxyPass / http://192.168.20.52:8081/
</VirtualHost>
#+END_SRC

add httpd.conf in apache2.conf

sudo vi /etc/apache2/apache2.conf
#+BEGIN_SRC sh
Include httpd.conf
#+END_SRC

** set first gerrit user and pass
#+BEGIN_SRC sh
touch ./review_site/etc/passwd
htpasswd -b ./review_site/etc/passwd gerritUser1 123456789
#+END_SRC

** add other user and pass
#+BEGIN_SRC sh
htpasswd -b ./review_site/etc/passwd UserName PassWord
#+END_SRC

** start gerrit
#+BEGIN_SRC sh
./review_site/bin/gerrit.sh start
#+END_SRC

** 
Gerrit stores configuration files, the server’s SSH keys, and the managed Git
repositories under a local directory, typically referred to as '$site_path'. 
If the embedded H2 database is being used, its data files will also be stored
under this directory.

You also have to decide where to store your server side git repositories. This
can either be a relative path under '$site_path' or an absolute path anywhere 
on your server system. You have to choose a place before commencing your init
phase.

Initialize a new site directory by running the init command, passing the path 
of the site directory to be created as an argument to the '-d' option. Its 
recommended that Gerrit Code Review be given its own user account on the host
system:

#+BEGIN_SRC sh
sudo adduser gerrit2
sudo su gerrit2
java -jar gerrit.war init -d /path/to/your/gerrit_application_directory
#+END_SRC

'Please note:' 
If you choose a location where your new user doesn’t have any privileges, you
may have to manually create the directory first and then give ownership of that
location to the 'gerrit2' user.

If run from an interactive terminal, the init command will prompt through a
series of configuration questions, including gathering information about the
database created above. If the terminal is not interactive, running the init
command will choose some reasonable default selections, and will use the
embedded H2 database. Once the init phase is complete, you can review your
settings in the file '$site_path/etc/gerrit.config'.

When running the init command, additional JARs might be downloaded to support
optional selected functionality. If a download fails a URL will be displayed and
init will wait for the user to manually download the JAR and store it in the
target location.

When the init phase is complete, the daemon will be automatically started in 
the background and your web browser will open to the site:

#+BEGIN_SRC sh
Initialized /home/gerrit2/review_site
Executing /home/gerrit2/review_site/bin/gerrit.sh start
Starting Gerrit Code Review: OK
Waiting for server to start ... OK
Opening browser ...
#+END_SRC

When the browser opens, sign in to Gerrit through the web interface. The first
user to sign-in and register an account will be automatically placed into the
fully privileged Administrators group, permitting server management over the web
and over SSH. Subsequent users will be automatically registered as unprivileged
users.

* Err Fix
** gerrit has failed to create some tables
solution: create the missing tables manually in the MySQL database.
#+BEGIN_SRC mysql
CREATE TABLE account_group_by_id_aud ( 
added_by INT DEFAULT 0 NOT NULL, 
removed_by INT, 
removed_on TIMESTAMP NULL DEFAULT NULL, 
group_id INT DEFAULT 0 NOT NULL, 
include_uuid VARCHAR(255) BINARY DEFAULT '' NOT NULL, 
added_on TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
PRIMARY KEY(group_id,include_uuid,added_on) 
);

CREATE TABLE account_group_members_audit (
added_by INT DEFAULT 0 NOT NULL,
removed_by INT,
removed_on TIMESTAMP NULL DEFAULT NULL,
account_id INT DEFAULT 0 NOT NULL,
group_id INT DEFAULT 0 NOT NULL,
added_on TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
PRIMARY KEY(account_id,group_id,added_on)
);

CREATE TABLE changes (
change_key VARCHAR(60) BINARY DEFAULT '' NOT NULL,
created_on TIMESTAMP NOT NULL,
last_updated_on TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
owner_account_id INT DEFAULT 0 NOT NULL,
dest_project_name VARCHAR(255) BINARY DEFAULT '' NOT NULL,
dest_branch_name VARCHAR(255) BINARY DEFAULT '' NOT NULL,
status CHAR(1) DEFAULT ' ' NOT NULL,
current_patch_set_id INT DEFAULT 0 NOT NULL,
subject VARCHAR(255) BINARY DEFAULT '' NOT NULL,
topic VARCHAR(255) BINARY,
original_subject VARCHAR(255) BINARY,
submission_id VARCHAR(255) BINARY,
row_version INT DEFAULT 0 NOT NULL,
change_id INT DEFAULT 0 NOT NULL
,PRIMARY KEY(change_id)
);
#+END_SRC

Run again gerrit WAR to check if there are no table errors this time:
gerrit/$ java -jar gerrit.war init --batch -d <installation_folder>
