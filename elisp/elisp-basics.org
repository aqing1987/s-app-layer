#+title: Elisp Basics
#+options: ^:nil

* evaluate code
To evaluate elisp code, for example, type *(+ 3 4)*, then move your
cursor to after the closing parenthesis, then call *eval-last-sexp*
*[Ctrl+x Ctrl+e]*. Emacs will evaluate the lisp expression to the
left of the cursor.

Alternatively, you can select the lisp code, then *Alt+x eval-region*.

Alternatively, you can *Alt+x ielm*. It will start a interactive
elisp command line interface.

To find the doc string of a function, *Alt+x describe-function*
*[Ctrl+h f]*. (If the word under cursor is a function, emacs will
lookup that by default saves typing.)

* Printing
#+BEGIN_SRC emacs lisp
; printing
(message "hi")

; printing variable values
(message "Her age is: %d" 16) ; %d is for number
(message "Her name is: %s" "Vicky") ; %s is for string
(message "My list is: %S" (list 8 2 3)) ; %S is for any lisp expression

#+END_SRC

You can see the output in the buffer named "*Messages*". You can switch
to it by *Alt+x view-echo-area-messages [Ctrl+h e]*

* Arithmetic
#+BEGIN_SRC emacs lisp
(+ 4 5 1)  ; 10
(- 9 2)    ; 7
(- 9 2 3)  ; 4
(* 2 3)    ; 6
(* 2 3 2)  ; 12

;; integer part of quotient
(/ 7 2)    ; 3

;; division
(/ 7 2.0)  ; 3.5

;; mod, remainder
(% 7 4)    ; 3

;; power; exponential
(expt 2 3) ; 8
#+END_SRC

*WARNING:* single digit decimal number such as *2.* needs a zero
after the dot, like this: *2.0*. For example *(/ 7 2.)* returns
3, not 3.5.

#+BEGIN_SRC elisp
;; 3. is a integer, 3.0 is a float
(integerp 3.)  ; t
(floatp 3.)    ; nil
(floatp 3.0)   ; t
#+END_SRC

Function names that end with a "p" often means it return either true
or false. (The "p" stands for "predicate") *t* means true; *nil*
means false.

* Convert Float/Integer
#+BEGIN_SRC elisp
;; int to float
(float 3)  ; 3.0

(truncate 3.3)  ; 3

(floor 3.3)  ; 3

(ceiling 3.3)  ; 4

(round 3.4)  ; 3

#+END_SRC

* Convert String and Number
#+BEGIN_SRC elisp
(string-to-number "3")

(number-to-string 3)
#+END_SRC

You can also use *format* to convert number to string.

* True, False
In elisp, the symbol *nil* is false, anything else is considered true.
Also, *nil* is equivalent to the empty list *()*, so *()* is also
false.

#+BEGIN_SRC elisp
;; all the following are flase. They all evaluate to "nil"
(if nil "yes" "no")  ; "no"
(if () "yes" "no")  ; "no"
(if '() "yes" "no")  ; "no"
(if (list) "yes" "no")  ; "no", because (list) eval to a empty list
                        ; same as ()
#+END_SRC

By convention, the symbol *t* is used for true.
#+BEGIN_SRC elisp
(if t "yes" "no")  ; "yes"
(if 0 "yes" "no")  ; "yes"
(if "" "yes" "no")  ; "yes"
(if [] "yes" "no")  ; "yes". The [] is vector of 0 elements
#+END_SRC

There is no "boolean datatype" in elisp. Just remember that *nil*
and empty list *()* are false, anything else is true.

** Boolean Functions

Here's *and* and *or*.

#+BEGIN_SRC elisp
(and t nil) ; nil
(or t nil) ; t

;; can take multiple args
(and t nil t t t t) ; nil

#+END_SRC

Comparing numbers:
#+BEGIN_SRC elisp
(< 3 4) ; less than
(> 3 4) ; greater than

(<= 3 4) ; less or equal to
(>= 3 4) ; greater or equal to

(= 3 3) ; t
(= 3 3.0000000000000000001) ; t

(/= 3 4) ; not equal. => t
#+END_SRC

Comparing strings:
#+BEGIN_SRC elisp
;; compare string
(equal "abc" "abc") ; t

;; dedicated function for comparing string
(string-equal "abc" "abc") ; t

(string-equal "abc" "Abc") ; nil. Case matters

;; can be used to compare string and symbol
(string-equal "abc" 'abc) ; t
#+END_SRC

For generic equality test, use *equal*. It tests if two values have
the same datatype and value.
#+BEGIN_SRC elisp
;; test if two values have the same datatype and value.

(equal 3 3) ; t
(equal 3.0 3.0) ; t

(equal 3 3.0) ; nil. Because datatype doesn't match

;; test equality of lists
(equal '(3 4 5) '(3 4 5)) ; t
(equal '(3 4 5) '(3 4 "5")) ; nil

;; test equality of strings
(equal "e" "e") ; t

;; test equality of symbols
(equal 'abc 'abc) ; t
#+END_SRC

There's also the function *eq*, it returns *t* if the two args are
the same Lisp object. This is usually not what you want.
*(eq "e" "e")* returns *nil*.

To test for inequality, the */=* is for numbers only, and doesn't
work for strings and other lisp data. Use *not* to negate your
equality test, like this:
#+BEGIN_SRC elisp
(not (= 3 4)) ; t
(/= 3 4) ; t. "/=" is for comparing numbers only

(not (equal 3 4)) ; t. General way to test inequality.
#+END_SRC

** even, odd
#+BEGIN_SRC elisp
(= (% n 2) 0) ; test even

(= (% n 2) 1) ; test odd
#+END_SRC

* Variables
** Global Variables
*setq* is used to set variables. Variables need not be declared, and
is global.
#+BEGIN_SRC elisp
(setq x 1) ; assign 1 to x
(setq a 3 b 2 c 7) ; assign 3 to a, 2 to b, 7 to c
#+END_SRC

** Local Variables
To define local variabls, use *let*. The form is: 
*(let (var1 var2 ...) body)* where *body* is (one or more) lisp
expressions.
The body's last expression's value is returned.
#+BEGIN_SRC elisp
  (let (a b)
    (setq a 3)
    (setq b 4)
    (+ a b)
  ) ; 7
#+END_SRC

Another form of *let* is this:
*(let ((var1 val1) (var2 val2) ...) body)*. Example:
#+BEGIN_SRC elisp
  (let ((a 3) (b 4))
    (+ a b)
  ) ; 7
#+END_SRC

This form lets you set values to variable without using many *setq*
in the body. This form is convenient if you just have a few simple
local vars with known values.

* If Then Else
The form for "if" expression is: *(if test body)*.

If you want a "else" part, the form is
*(if test true_body false_body)*.

Examples:
#+BEGIN_SRC elisp
(if (< 3 2) 7 8) ; 8

;; no false expression, return nil
(if (< 3 2) (message "yes")) ; nil
#+END_SRC

If you do not need a "else" part, you should use the function *when*
instead, because it is more clear. The form is this:
*(when test expr1 expr2 ...)*. Its meaning is the same as
*(if test (progn expr1 expr2 ...))*

* Block of Expressions
Sometimes you need to group several expressions together as one
single expression. This can be done with *progn*.
#+BEGIN_SRC elisp
(progn (message "a") (message "b"))
;; is equivalent to
(message "a") (message "b")
#+END_SRC

The purpose of *(progn ...)* is similar to a block of code *{...}*
in C-like languages. It is used to group together a bunch of 
expressions into one single parenthesized expression. Most of the
time it's used inside "if". For example:
#+BEGIN_SRC elisp
  (if something
      (progn ; true
        ...
      )
      (progn ; else
        ...
      )
    )

#+END_SRC

*progn* returns the last expression in its body.
#+BEGIN_SRC elisp
(progn 3 4) ; 4
#+END_SRC

* Loop
Most basic loop in elisp is with *while*.
*(while test body)*
, where *body* is one or more lisp expressions.

#+BEGIN_SRC elisp
  (setq x 0)

  (while (< x 4)
    (print (format "number is %d" x))
    (setq x (1+ x)))
#+END_SRC

#+BEGIN_SRC elisp
  ;; inserts Unicode chars 32 to 126
  (let ((x 32))
    (while (< x 127)
      (insert-char x)
      (setq x (+ x 1))))
#+END_SRC

Usually it's better to use *dolist* or *dotimes*.
* reference
http://ergoemacs.org/emacs/elisp_basics.html
