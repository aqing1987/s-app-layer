#+title: More Control Flow Tools
#+options: ^:nil

* if statements
There can be zero or more 'elif' parts, and the 'else' part is optional.
The keyword 'elif' is short for 'else if', and is useful to avoid excessive
indentation.

* for statements
Python's for statement iterates over the items of any sequence (a list or a
string), in the order that they appear in the sequence.

If you need to modify the sequence you are iterating over while inside the
loop (for example to duplicate selected items), it is recommended that you first
make a copy. Iterating over a sequence does not implicitly make a copy. The
slice notation makes this especially convenient.

* the range() function
If you do need to iterate over a sequence of numbers, the built-in function
range() comes in handy. It generates arithmetic progressions.

The given end point is never part of the generated sequence; range(10) generates
10 values, the legal indices for items of a sequence of length 10. It is possible
to let the range start at another number, or to specify a different increment
(even negative; sometimes this is called the 'step')

To iterate over the indices of a sequence, you can combine *range()* and *len()*
as follows:
#+BEGIN_SRC python
a = ['mary', 'had', 'a']
for i in range(len(a)):
    print(a[i])
#+END_SRC

In many ways the object returned by *range()* behaves as if it is a list, but
in fact it isn't. It is an object which returns the successive items of the
desired sequence when you iterate over it, but it doesn't really make the list,
thus saving space.

We say such an object is /iterable/, that is, suitable as a target for functions
and constructs that expect something from which they can obtain successive items
until the supply is exhausted. We have seen that the *for* statement is such an
/iterator/. The function *list()* is another; it creates lists from iterables:
#+BEGIN_SRC python
list(range(5))
#+END_SRC
* break and continue statements, and else clauses on loops
The *break* statement, like in C, breaks out of the innermost enclosing
*for* or *while* loop.

Loop statements may have an *else* clause; it is executed when the loop
terminates through exhaustion of the list (with *for*) or when the condition
becomes false (with *while*), but not when the loop is terminated by a *break*
statement.

The *continue* statement, also borrowed from C, continues with the next
iteration of the loop.

* pass statements
The *pass* statement does nothing. It can be used when a statement is required
syntactically but the program requires no action.

This is commonly used for creating minimal classes.

Another place *pass* can be used is as a place-holder for a function or
conditional body when you are working on new code, allowing you to keep thinking
at a more abstract level. The *pass* is silently ignored.

* defining functions
The keyword *def* introduces a function /definition/. It must be followed by
the function name and the parenthesized list of formal parameters. The
statements that form the body of the function start at the next line, and must
be indented.

The first statement of the function body can optionally be a string literal;
this string literal is the function's documentation string, or docstring.
There are tools which use docstrings to automatically produce online or printed
documentation, or to let the user interactively browse through code; it's good
practice to include docstrings in code that you write, so make a habit of it.

The /execution/ of a function introduces a new symbol table used for the local
variables of the function. More precisely, all variable assignments in a
function store the value in the local symbol table; whereas variable references
first look in the local symbol table, then in the local symbol tables of
enclosing functions, then in the global symbol table, and finally in the table
of built-in names. Thus, global variables cannot be directly assigned a value
within a function, although they may be referenced.

The actual parameters (arguments) to a function call are introduced in the
local symbol table of the called function when it is called; thus, arguments
are passed using /call by value/ (where the value is always an object reference,
not the value of the object). When a function calls another function, a new
local symbol table is created for that call.

A function definition introduces the function name in the current symbol table.
The value of the function name has a type that is recognized by the interpreter
as a user-defined function. This value can be assigned to another name which
can then also be used as a function. This serves as a general renaming
mechanism.

In fact, even functions without a *return* statement do return a value, albeit
a rather boring one. This value is called *None* (it's a built-in name).
Writing the value *None* is normally suppressed by the interpreter if it would
be the only value written.

The *return* statement returns with a value from a function. *return* without
an expression argument returns *None*. Failling off the end of a function also
returns *None*.

A method is a function that 'belongs' to an object and is named *obj.methodna*,
where *obj* is some object (this may be an expression), and *methodna* is the
name of a method that is defined by the object's type. Different types define
different methods. Methods of different types may have the same name without
causing ambiguity. (it is possible to define your own object types and methods,
using /classes/).

* more on defining functions
It is also possible to define functions with a variable number of arguments.

** default argument values
The most useful form is to specify a default value for one or more arguments.
This creates a function that can be called with fewer arguments than it is
defined to allow.

*in* keyword, tests whether or not a sequence contains a certain value.

*Important warning:* The default value is evaluated only once. This makes a
difference when the default is a mutable object such as a list, dictionary,
or instances of most classes.

** keyword arguments
Functions can also be called using *keyword arguments* of the form *kwarg=value*

In a function call, keyword arguments must follow positional arguments. All
the keyword arguments passed must match one of the arguments accepted by the
function, and their order is not important. No argument may receive a value
more than once.

When a final formal parameter of the form /**name/ is present, it receives a
dictionary containing all keyword arguments except for those corresponding to
a formal parameter. This may be combined with a formal parameter of the form
/*name/ which receives a tuple containing the positional arguments beyond
the formal parameter list. (/*name/ must occur before /**name/)

** arbitrary argument lists
Finally, the least frequently used option is to specify that a function can be
called with an arbitrary number of arguments. These arguments will be wrapped
up in a tuple. Before the variable number of arguments, zero or more normal
arguments may occur.

Normally, these *variadic* arguments will be last in the list of formal
parameters, because they scoop up all remaining input arguments that are passed
to the function. Any formal parameters which occur after the variadic parameter
are 'keyword-only' arguments, meaning that they can only be used as keywords
rather than positional arguments.

** unpacking argument lists
The reverse situation occurs when the arguments are already in a list or tuple
but need to bu unpacked for a function call requiring separate positional
arguments. For instance, the built-in *range()* function expects separate
/start/ and /stop/ arguments. If they are not available separately, write the
function call with the /*-operator/ to unpack the arguments out of a list or
tuple.

In the same fashion, dictionaries can deliver keyword arguments with the
/**-operator/.

** lambda expressions
Small anonymous functions can be created with the *lambda* keyword.
Lambda functions can be used wherever function objects are required. They are
syntactically restricted to a single expression. Semantically, they are just
syntactic sugar for a normal function definition. Like nested function
definitions, lambda functions can reference variables from the containing
scope.

** documentation strings
Here are some conventions about the content and formatting of documentation
strings.

The first line should always be a short, concise summary of the object's purpose.
For brevity, it should not explicitly state the object's name or type, since
these are available by other means (except if the name happens to be a verb
describing a function's operation). This line should begin with a capital letter
and end with a period.

If there are more lines in the documentation string, the second line should be
blank, visually separating the summary from the rest of the description. The
following lines should be one or more paragraphs describing the object's calling
conventions, its side effects, etc.

The Python parser does not strip indentation from multi-line string literals in
Python, so tools that process documentation have to strip indentation if desired.
This is done using the following convention. The first non-blank line after the
first line of the string determiones the amount of indentation for the entire
documentation string.

** function annotations
*Function annotations* are completely optional metadata information about the
types used by user-defined functions.

* intermezzo: coding style
For python, [[https://www.python.org/dev/peps/pep-0008/][PEP 8]] has emerged as the style guide that most projects adhere to;
it promotes a very readable and eye-pleasing coding style. Every Python developer
should read it at some point; here are the most important points extracted for
you:

+ Use 4-space indentation, and no tabs
  4 spaces are a good compromise between small indentation (allows greater
  nesting depth) and large indentation (easier to read). Tabs introduce confusion
  and are best left out.

+ Wrap lines so that they don't exceed 79 characters.
  This helps users with small displays and makes it possible to have several
  code files side-by-side on larger displays.

+ Use blank lines to separate functions and classes, and larger blocks of
  code inside functions.

+ When possible, put comments on a line of their own.

+ Use docstrings

+ Use spaces around operators and aftrer commas, but not directly inside
  bracketing constructs: *a = f(1, 2) + g(3, 4)*.

+ Name your classes and functions consistently; the convetion is to use
  *CamelCase* for classes and *lower_case_with_underscores* for functions and
  methods. Always use *self* as the name for the first method argument.

+ Don't use facy encodings if your code is meant to be used in international
  environments. Python's default, UTF-8, or even plain ASCII work best in any
  case.

+ Likewise, don't use non-ASCII characters in identifiers if there is only the
  slightest chance people speaking a different language will read or maintain
  the code.