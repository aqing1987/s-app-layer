#+OPTIONS: ^:nil

* Motivation
The real power of SQL comes from working with data across multiple
tables at once.
* Why would we want to split data into separate tables
** Database Normalization
When creating a database, it is really important to think about how 
data will be stored. This is known as normalization, and it is a huge 
part of most SQL classes. If you are in charge of setting up a new 
database, it is important to have a thorough understanding of 
database normalization.

There are essentially three ideas that are aimed at database 
normalization:

+ Are the tables storing logical groupings of the data?
+ Can I make changes in a single location, rather than in many tables 
  for the same information?
+ Can I access and manipulate data quickly and efficiently?
* introduction to JOINs
The whole goal of *JOIN* statements is to allow us to pull from more 
than one table at a time.

Again - JOINs are useful for allowing us to pull data from multiple 
tables. This is both simple and powerful all at the same time.

With the addition of the JOIN statement to our toolkit, we will also 
be adding the ON statement.

* Text+Quiz: Your First JOIN
** Write Your First JOIN
The *JOIN* introduces the second table from which you would like to 
pull data, and the *ON* tells you how you would like to merge the 
tables in the FROM and JOIN statements together.
#+BEGIN_SRC sql
  SELECT orders.*
  FROM orders
  JOIN accounts
  ON orders.account_id = accounts.id;
#+END_SRC

** What to Notice
We are able to pull data from two tables:

+ orders
+ accounts
Above, we are only pulling data from the orders table since in the 
SELECT statement we only reference columns from the orders table.

The ON statement holds the two columns that get linked across the two 
tables. This will be the focus in the next concepts.

** Additional Information
If we wanted to only pull individual elements from either the orders 
or accounts table, we can do this by using the exact same information 
in the FROM and ON statements. However, in your SELECT statement, you 
will need to know how to specify tables and columns in the SELECT 
statement:

+ The table name is always before the period.
+ The column you want from that table is always after the period.

For example, if we want to pull only the account name and the dates 
in which that account placed an order, but none of the other columns, 
we can do this with the following query:
#+BEGIN_SRC sql
  SELECT accounts.name, orders.occurred_at
  FROM orders
  JOIN accounts
  ON orders.account_id = accounts.id;
#+END_SRC

This query only pulls two columns, not all the information in these 
two tables. Alternatively, the below query pulls all the columns from 
both the accounts and orders table.
#+BEGIN_SRC sql
  SELECT *
  FROM orders
  JOIN accounts
  ON orders.account_id = accounts.id;
#+END_SRC

And the first query you ran pull all the information from only the 
orders table:
#+BEGIN_SRC sql
  SELECT orders.*
  FROM orders
  JOIN accounts
  ON orders.account_id = accounts.id;
#+END_SRC

Joining tables allows you access to each of the tables in the SELECT 
statement through the table name, and the columns will always follow 
a . after the table name.

** Quiz Questions
1. Try pulling all the data from the accounts table, and all the data 
   from the orders table.
   #+BEGIN_SRC sql
     SELECT accounts.*, orders.*
     FROM accounts
     JOIN orders
     ON accounts.id = orders.account_id;
   #+END_SRC

Notice this result is the same as if you switched the tables in the 
FROM and JOIN. Additionally, which side of the = a column is listed 
doesn't matter.

2. Try pulling standard_qty, gloss_qty, and poster_qty from the orders
   table, and the website and the primary_poc from the accounts table.
   #+BEGIN_SRC sql
     SELECT orders.standard_qty, orders.gloss_qty, orders.poster_qty,
            accounts.website, accounts.primary_poc

     FROM orders
     JOIN accounts
     ON orders.account_id = accounts.id;
   #+END_SRC

Notice that we need to specify every table a column comes from in the 
SELECT statement.
* ERD Remindeer
an entity relationship diagram (ERD) is a common way to view data in 
a database. It is also a key element to understanding how we can pull 
data from multiple tables.

** Tables & Columns
You will notice some of the columns in the tables have PK or FK next 
to the column name, while other columns don't have a label at all.

If you look a little closer, you might notice that the PK is 
associated with the first column in every table. The PK here stands 
for primary key. A primary key exists in every table, and it is a 
column that has a unique value for every row.

If you look at the first few rows of any of the tables in our 
database, you will notice that this first, PK, column is always 
unique. For this database it is always called id, but that is not 
true of all databases.
* Text: Primary and Foreign Keys
** Primary Key (PK)
A primary key is a unique column in a particular table. This is the 
first column in each of our tables. Here, those columns are all 
called id, but that doesn't necessarily have to be the name. It is 
common that the primary key is the first column in our tables in most
databases.

** Foreign Key (FK)
A foreign key is when we see a primary key in another table. We can 
see these in the previous ERD the foreign keys are provided as:

+ region_id
+ account_id
+ sales_rep_id

Each of these is linked to the primary key of another table. 

* JOIN Revisited
** NOTICE
Notice our SQL query has the two tables we would like to join - one 
in the FROM and the other in the JOIN. Then in the ON, we will ALWAYs 
have the PK equal to the FK:

The way we join any two tables is in this way: linking the PK and FK 
(generally in an ON statement).

** JOIN More than Two Tables
If we wanted to join all three of these tables, we could use the same 
logic. The code below pulls all of the data from all of the joined 
tables.

#+BEGIN_SRC sql
  SELECT *
  FROM web_events
  JOIN accounts
  ON web_events.account_id = accounts.id
  JOIN orders
  ON accounts.id = orders.account_id;
#+END_SRC

To pull specific columns, the SELECT statement will need to specify 
the table that you are wishing to pull the column from, as well as 
the column name. We could pull only three columns in the above by 
changing the select statement to the below, but maintaining the rest 
of the JOIN information:
#+BEGIN_SRC sql
  SELECT web_events.channel, accounts.name, orders.total
#+END_SRC

We could continue this same process to link all of the tables if we 
wanted. For efficiency reasons, we probably don't want to do this 
unless we actually need information from all of the tables.
* Alias
When we JOIN tables together, it is nice to give each table an alias. 
Frequently an alias is just the first letter of the table name. You 
actually saw something similar for column names in the Arithmetic 
Operators concept.

Example:
#+BEGIN_SRC sql
  FROM tablename AS t1
  JOIN tablename2 AS t2
#+END_SRC

Before, you saw something like:
#+BEGIN_SRC sql
  SELECT col1 + col2 AS total, col3
#+END_SRC

Frequently, you might also see these statements without the AS 
statement. Each of the above could be written in the following way 
instead, and they would still produce the exact same results:
#+BEGIN_SRC sql
  FROM tablename t1
  JOIN tablename2 t2
#+END_SRC

and
#+BEGIN_SRC sql
  SELECT col1 + col2 total, col3
#+END_SRC

** Aliases for Columns in Resulting Table
While aliasing tables is the most common use case. It can also be 
used to alias the columns selected to have the resulting table 
reflect a more readable name.

Example:
#+BEGIN_SRC sql
  Select t1.column1 aliasname, t2.column2 aliasname2
  FROM tablename AS t1
  JOIN tablename2 AS t2
#+END_SRC




* JOIN Questions Part I
1. Provide a table for all web_events associated with account name of 
   Walmart. There should be three columns. Be sure to include the 
   primary_poc, time of the event, and the channel for each event. 
   Additionally, you might choose to add a fourth column to assure 
   only Walmart events were chosen. 
   #+BEGIN_SRC sql
     SELECT a.primary_poc, w.occurred_at, w.channel, a.name
     FROM web_events AS w
     JOIN accounts AS a
     ON w.account_id = a.id
     WHERE a.name = 'Walmart';
   #+END_SRC

2. Provide a table that provides the region for each sales_rep along 
   with their associated accounts. Your final table should include 
   three columns: the region name, the sales rep name, and the 
   account name. Sort the accounts alphabetically (A-Z) according to 
   account name.
   #+BEGIN_SRC sql
     SELECT r.name r_name, s.name s_name, a.name a_name
     FROM sales_reps AS s
     JOIN accounts AS a
     ON s.id = a.sales_rep_id
     JOIN region AS r
     ON r.id = s.region_id
     ORDER BY a.name;
   #+END_SRC

3. Provide the name for each region for every order, as well as the 
   account name and the unit price they paid (total_amt_usd/total) 
   for the order. Your final table should have 3 columns: region name, 
   account name, and unit price. A few accounts have 0 for total, so I 
   edivided by (total + 0.01) to assure not dividing by zero.
   #+BEGIN_SRC sql
     SELECT r.name r_name, a.name a_name, (o.total_amt_usd/(o.total+0.01)) unit_price
     FROM orders AS o
     JOIN accounts AS a
     ON o.account_id = a.id
     JOIN sales_reps AS s
     ON a.sales_rep_id = s.id
     JOIN region AS r
     ON s.region_id = r.id;
   #+END_SRC
