#+TITLE: Basic Sql
#+OPTIONS: ^:nil

* Entity Relationship Diagrams
An entiry relationship diagram(ERD) is a common way to view data in
a database.
The diagram help you visualize the data you are analyzing including:
+ The names of the tables
+ The columns in each table
+ The way the tables work together

* Why SQL
Why Businesses Like databases:
+ Data integrity is ensured
  only the data you want entered is entered, and only certain users
  are able to enter data into the database.

+ Data can be accessed quickly
  SQL allows you to obtain results very quickly from the data stored
  in a database. Code can be optimized to quickly pull results.

+ Data is easily shared
  multiple individuals can access data stored in a database, and the
  data is the same for all users allowing for consistent results for
  consistent results for anyone with access to your database.

* First Query
Every query will have at least a *SELECT* and *FROM* statement. The
*SELECT* statement is where you put the *columns* for which you would
like to show the data. The *FROM* statement is where you put the 
*tables* from which you would like to pull data.

e.g.
#+BEGIN_SRC sql
  SELECT id, account_id, occurred_at
  FROM orders
#+END_SRC

* Formatting Your Queries
** Capitalization
It is common practice to capitalize commands (SELECT, FROM), and keep 
everything else in your query lowercase. This makes queries easier to
read, which will matter more as you write more complex queries.

** Avoid Spaces in Table and Variable Names
It is common to use underscores and avoid spaces in column names. It
is a bit annoying to work with spaces in SQL.

** Use White Space in Queries
SQL queries ignore spaces, so you can add as many spaces and blank
lines between code as you want.

** SQL isn't Case Sensitive
SQL is not case sensitive. However, I would again urge you to follow
the conventions outlined earlier in terms of fully capitalizing the
commands, while leaving other pieces of your code in lowercase.

** Semicolons
It is considered best practices to put a semicolon at the end of each
statement, which also allows you to run multiple commands at once if 
your environment is able to show multiple results at once.

* LIMIT
The *SELECT* (to choose columns) and *FROM* (to choose tales) 
statements. The *LIMIT* statement is useful when you want to see
just the first few rows of a table. This can be much faster for 
loading than if we load the entire dataset.

The *LIMIT* command is always the very last part of a query. An
example of showing just the first 10 rows of the orders table with
all of the columns minght look like the following:
#+BEGIN_SRC sql
  SELECT *
  FROM orders
  LIMIT 10;
#+END_SRC

* ORDER BY
The *ORDER BY* statement allows us to order our table by any row.

The *ORDER BY* statement is always after the *SELECT* and *FROM* 
statements, but it is before the *LIMIT* statement. If we are using
the *LIMIT* statement, it will always appear last.

- Pro Tip
  Remember *DESC* can be added after the column in your *ORDER BY*
  statement to sort in descending order, as the default is to sort
  in ascending order.

** Quit
1. Write a query to return the 10 earliest orders in the orders table.
   Include the id, occurred_at, and total_amt_usd.
   #+BEGIN_SRC sql
     SELECT id, occurred_at, total_amt_usd
     FROM orders
     ORDER BY occurred_at
     LIMIT 10;
   #+END_SRC

2. Write a query to return the top 5 orders in terms of largest
   *total_amt_usd*. Include the *id*, *account_id*, and 
   *total_amt_usd*.
   #+BEGIN_SRC sql
     SELECT id, account_id, total_amt_usd
     FROM orders
     ORDER BY total_amt_usd DESC
     LIMIT 5;
   #+END_SRC

3. Write a query to return the bottom 20 *orders* in terms of least
   *total*. Include the id, account_id, and total.
   #+BEGIN_SRC sql
     SELECT id, account_id, total
     FROM orders
     ORDER BY total
     LIMIT 20;
   #+END_SRC

** ORDER BY Part II test
1. Write a query that returns the top 5 rows from *orders* ordered
   according to newest to oldest, but with the largest *total_amt_usd*
   for each date listed first for each date.
   #+BEGIN_SRC sql
     SELECT *
     FROM orders
     ORDER BY occurred_at DESC, total_amt_usd DESC
     LIMIT 5;
   #+END_SRC

2. Write a query that retuns the top 10 rows from *orders* ordered
   according to oldest to newest, but with the smallest *total_amt_usd*
   for each date listed first for each date.
   #+BEGIN_SRC sql
     SELECT *
     FROM orders
     ORDER BY occurred_at, total_amt_usd
     LIMIT 10;
   #+END_SRC

* WHERE
The *WHERE* clause goes after *FROM* but before *ORDER BY* or *LIMIT*.
Using the *WHERE* statement, we can subset out tables based on
conditions that must be met.

Common symbols used within *WHERE* statements include:
+ > (greater than)
+ < (less than)
+ >= (greater than or equal to)
+ <= (less than or equal to)
+ = (equal to)
+ !+ (not equal to)

** Questions
1. Pull the first 5 rows and all columns from the *orders* table that
   have a dollar amount of *gloss_amt_usd* greater than or equal to
   1000.
   #+BEGIN_SRC sql
     SELECT *
     FROM orders
     WHERE gloss_amt_usd >= 1000
     LIMIT 5;
   #+END_SRC

2. Pull the first 10 rows and all columns from the *orders* table
   that have a *total_amt_usd* less than 500.
   #+BEGIN_SRC sql
     SELECT *
     FROM orders
     WHERE total_amt_usd < 500
     LIMIT 10;
   #+END_SRC

* WHERE with Non-Numeric Data
The *WHERE* statement can also be used with non-numerical data. We
can use the *=* and *!=* operators here. You also need to be sure to
use single quotes (just be careful if you have quotes in the original
text) with the text data.

Commonly when we are using *WHERE* with non-numeric data fields, we
use the *LIKE*, *NOT*, or *IN* operators. 
	
** Practice Question Using WHERE with Non-Numeric Data
1. Filter the accounts table to include the company name, website, and
   the primary point of contact (primary_poc) for *Exxon Mobil* in the
   *accounts* table
   #+BEGIN_SRC sql
     SELECT name, website, primary_poc
     FROM accounts
     WHERE name = 'Exxon Mobil';
   #+END_SRC

* Arithmetic Operators
** Derived Columns
Creating a new column that is a combination of existing columns is
known as a *derived* column.

Common operators include:
1. * (Multiplication)
2. + (Addition)
3. - (Subtraction)
4. / (Division)

** Questions
1. Create a column that divides the *standard_amt_usd* by the 
*standard_qty* to find the unit price for standard paper for each
order. Limit the results to the first 10 orders, and include the *id*
and *account_id* fields.

#+BEGIN_SRC sql
  SELECT
      id,
      account_id,
      standard_amt_usd / standard_qty AS unit_price
  FROM orders
  LIMIT 10;
#+END_SRC

2. Write a query that finds the percentage of revenue that comes from
poster paper for each order. You will need to use only the columns
that end with *_usd*. Include the *id* and *account_id* fields.
#+BEGIN_SRC sql
  SELECT
      id,
      account_id,
      poster_amt_usd/(standard_amt_usd + gloss_amt_usd + poster_amt_usd) AS post_per
  FROM orders;
#+END_SRC

* Introduction to Logical Operators
In the next concepts, you will be learning about *Logical Operators*.
*Logical Operators* include:

1. LIKE
   This allows you to perform operations similar to using *WHERE*
   and *=*, but for cases when you might *not* know exactly what you
   are looking for.

2. IN
   This allows you to perform operations similar to using *WHERE* and
   *=*, but for more than one condition.

3. NOT
   This is used with *IN* and *LIKE* to select all of the rows
   *NOT LIKE* or *NOT IN* a certain condition.

4. AND & BETWEEN
   These allow you to combine operations where all combined conditions
   must be true.

5. OR
   This allow you to combine operations where at least one of the
   combined conditions must be true.

** LIKE
The *LIKE* operator is extremely useful for working with text. You
will use *LIKE* within a *WHERE* clause.
The *LIKE* operator is frequently used with *%*. The *%* tells us that
we might want any number of characters leading up to a particular set
of characters or following a certain set of characters. Remember you
will need to use single quotes for the text you pass to the *LIKE*
operator.
*** Questions using the LIKE operator
Use the accounts table to find
1. All the companies whose names start with 'C'.
   #+BEGIN_SRC sql
     SELECT name
     FROM accounts
     WHERE name LIKE 'C%';
   #+END_SRC

2. All companies whose names contain the string 'one' somewhere in
   the name.
   #+BEGIN_SRC sql
     SELECT name
     FROM accounts
     WHERE name LIKE '%one%';
   #+END_SRC

3. All companies whose names end with 's'.
   #+BEGIN_SRC sql
     SELECT name
     FROM accounts
     WHERE name LIKE '%s';
   #+END_SRC

** IN
The *IN* operator is useful for working with both numeric and text
columns. This operator allows you to use an *=*, but for more than one
item of that particular column. We can check one, two or many column
values for which we want to pull data, but all within the same query.

*** Questions using IN operator
1. Use the *accounts* table to find the account name, primary_poc, and
   sales_rep_id for Walmart, Target, and Nordstrom.
   #+BEGIN_SRC sql
     SELECT name, primary_poc, sales_rep_id
     FROM accounts
     WHERE name IN ('Walmart', 'Target', 'Nordstrom');
   #+END_SRC

2. Use the *web_events* table to find all information regarding
   individuals who were contacted via the channel of organic or
   adwords.
   #+BEGIN_SRC sql
     SELECT *
     FROM web_events
     WHERE channel IN ('organic', 'adwords');
   #+END_SRC

** NOT
The *NOT* operator is an extremely useful operator for working with
the previous two operators we introduced: *IN* and *LIKE*. By 
specifying *NOT LIKE* or *NOT IN*, we can grab all of the rows that
do not meet a particular criteria.

*** Questions using the NOT operator
1. Use the accounts table to find the account name, primary poc, and 
   sales rep id for all stores except Walmart, Target, and Nordstrom.
   #+BEGIN_SRC sql
     SELECT name, primary_poc, sales_rep_id
     FROM accounts
     WHERE name NOT IN ('Walmart', 'Target', 'Nordstrom');
   #+END_SRC

2. Use the web_events table to find all information regarding 
   individuals who were contacted via any method except using organic 
   or adwords methods.
   #+BEGIN_SRC sql
     SELECT *
     FROM web_events
     WHERE channel NOT IN ('organic', 'adwords');
   #+END_SRC

3. Use the accounts table to find all the companies whose names do 
   not start with 'C'.
   #+BEGIN_SRC sql
     SELECT name
     FROM accounts
     WHERE name NOT LIKE 'C%';
   #+END_SRC

4. Use the accounts table to find All companies whose names do not 
   contain the string 'one' somewhere in the name.
   #+BEGIN_SRC sql
     SELECT name
     FROM accounts
     WHERE name NOT LIKE '%one%';
   #+END_SRC

5. Use the accounts table to find All companies whose names do not
   end with 's'.
   #+BEGIN_SRC sql
     SELECT name
     FROM accounts
     WHERE name NOT LIKE '%s';
   #+END_SRC

** AND and BETWEEN
The AND operator is used within a WHERE statement to consider more 
than one logical clause at a time. Each time you link a new statement 
with an AND, you will need to specify the column you are interested 
in looking at. You may link as many statements as you would like to 
consider at the same time. This operator works with all of the 
operations we have seen so far including arithmetic operators 
(+, *, -, /). LIKE, IN, and NOT logic can also be linked together 
using the AND operator.

*** BETWEEN Operator
Sometimes we can make a cleaner statement using BETWEEN than we can
using AND. Particularly this is true when we are using the same 
column for different parts of our AND statement.


Instead of writing :
#+BEGIN_SRC sql
WHERE column >= 6 AND column <= 10
#+END_SRC

we can instead write, equivalently:
#+BEGIN_SRC sql
WHERE column BETWEEN 6 AND 10
#+END_SRC

*** Questions using AND and BETWEEN operators
1. Write a query that returns all the orders where the standard_qty 
   is over 1000, the poster_qty is 0, and the gloss_qty is 0.
   #+BEGIN_SRC sql
     SELECT *
     FROM orders
     WHERE standard_qty > 1000 AND poster_qty = 0 AND gloss_qty = 0;
   #+END_SRC

2. Using the accounts table find all the companies whose names do 
   not start with 'C' and end with 's'.
   #+BEGIN_SRC sql
     SELECT name
     FROM accounts
     WHERE name NOT LIKE '%C' AND name LIKE '%s';
   #+END_SRC

3. Use the web_events table to find all information regarding 
   individuals who were contacted via organic or adwords and started 
   their account at any point in 2016 sorted from newest to oldest.
   #+BEGIN_SRC sql
     SELECT *
     FROM web_events
     WHERE channel IN ('organic', 'adwords') AND occurred_at BETWEEN '2016-01-01' AND '2017-01-01'
     ORDER BY occurred_at DESC;
   #+END_SRC




