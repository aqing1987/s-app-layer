#+TITLE: SQL Aggregations
#+OPTIONS: ^:nil

* NULLs and Aggregation
Notice that NULLs are different than a zero - they are cells where 
data does not exist.

When identifying NULLs in a WHERE clause, we write *IS NULL* or 
*IS NOT NULL*. We don't use =, because NULL isn't considered a value 
in SQL. Rather, it is a property of the data.

There are two common ways in which you are likely to encounter NULLs:
+ NULLs frequently occur when performing a LEFT or RIGHT JOIN. You 
  saw in the last lesson - when some rows in the left table of a left 
  join are not matched with rows in the right table, those rows will 
  contain some NULL values in the result set.

+ NULLs can also occur from simply missing data in our database.

* First Aggregation - COUNT
** COUNT the Number of Rows in a Table
Here is an example of finding all the rows in the accounts table.
#+BEGIN_SRC sql
  SELECT COUNT(*)
  FROM accounts;
#+END_SRC

But we could have just as easily chosen a column to drop into the 
aggregation function:
#+BEGIN_SRC sql
  SELECT COUNT(accounts.id)
  FROM accounts;
#+END_SRC

COUNT does not consider rows that have NULL values. Therefore, this 
can be useful for quickly identifying which rows have missing data. 
* SUM
Unlike COUNT, you can only use SUM on numeric columns. However, SUM 
will ignore NULL values.

** Aggregation Questions
1. Find the total amount of poster_qty paper ordered in the orders 
   table.
   #+BEGIN_SRC sql
     SELECT SUM(poster_qty) AS sum_poster
     FROM orders;
   #+END_SRC

2. Find the total amount of standard_qty paper ordered in the orders 
   table.
   #+BEGIN_SRC sql
     SELECT SUM(standard_qty) AS sum_standard
     FROM orders;
   #+END_SRC

3. Find the total dollar amount of sales using the total_amt_usd in 
   the orders table.
   #+BEGIN_SRC sql
     SELECT SUM(total_amt_usd) AS sum_total_amt
     FROM orders;
   #+END_SRC

4. Find the total amount spent on standard_amt_usd and gloss_amt_usd 
   paper for each order in the orders table. This should give a dollar 
   amount for each order in the table.
   #+BEGIN_SRC sql
     SELECT standard_amt_usd + gloss_amt_usd AS total_standard_gloass
     FROM orders;       
   #+END_SRC

5. Find the standard_amt_usd per unit of standard_qty paper. Your 
   solution should use both an aggregation and a mathematical operator.
   #+BEGIN_SRC sql
     SELECT SUM(standard_amt_usd)/SUM(standard_qty) AS standard_price_per_unit
     FROM orders;
   #+END_SRC


